// Generated by CoffeeScript 1.9.3
(function() {
  var init_edge_preview_graph, init_main_graph, load_connections;

  $(function() {
    var connections, connections_promise, connections_simplified, cy, cy_edge_preview;
    connections = {};
    connections_simplified = {};
    cy = init_main_graph();
    cy_edge_preview = init_edge_preview_graph();
    connections_promise = load_connections();
    connections_promise.then(function(data) {
      var e, i, k, len, ref, tmp;
      connections = data;
      tmp = {};
      ref = connections.edges;
      for (i = 0, len = ref.length; i < len; i++) {
        e = ref[i];
        tmp[e.data.source + "->" + e.data.target] = e;
      }
      connections_simplified = {
        nodes: connections.nodes,
        edges: (function() {
          var results;
          results = [];
          for (k in tmp) {
            e = tmp[k];
            results.push(e);
          }
          return results;
        })()
      };
      return cy.batch(function() {
        var edge, j, l, len1, len2, node, ref1, ref2, results;
        ref1 = connections_simplified.nodes;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          node = ref1[j];
          cy.add({
            group: 'nodes',
            data: node.data
          });
        }
        ref2 = connections_simplified.edges;
        results = [];
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          edge = ref2[l];
          results.push(cy.add({
            group: 'edges',
            data: edge.data
          }));
        }
        return results;
      });
    });
    return cy.on('tap', function(ev) {
      var el, node_formatter, nodes;
      el = ev.cyTarget;
      if (!(el.length || (typeof el.isEdge === "function" ? el.isEdge() : void 0))) {
        return;
      }
      nodes = el.connectedNodes();
      node_formatter = function(node, left) {
        return {
          group: 'nodes',
          data: {
            id: node.id()
          },
          position: {
            x: left,
            y: 125
          }
        };
      };
      return cy_edge_preview.batch(function() {
        var e, i, len, ref;
        cy_edge_preview.remove('');
        cy_edge_preview.add(node_formatter(nodes[0], 100));
        cy_edge_preview.add(node_formatter(nodes[1], 600));
        ref = connections.edges;
        for (i = 0, len = ref.length; i < len; i++) {
          e = ref[i];
          if (e.data.source === nodes[0].id() && e.data.target === nodes[1].id()) {
            cy_edge_preview.add({
              group: 'edges',
              data: e.data
            });
          }
        }
        return cy_edge_preview.resize();
      });
    });
  });

  load_connections = function() {
    var connections, connections_get;
    connections = $.Deferred();
    connections_get = $.get('/connections.json', (function(data) {
      var edge, node, ret;
      console.log('data', data);
      ret = {
        nodes: (function() {
          var i, len, ref, results;
          ref = data.nodes;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            node = ref[i];
            results.push({
              data: node
            });
          }
          return results;
        })(),
        edges: (function() {
          var i, len, ref, results;
          ref = data.edges;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            edge = ref[i];
            results.push({
              data: edge
            });
          }
          return results;
        })()
      };
      console.log(ret);
      return connections.resolve(ret);
    }), 'json');
    return connections;
  };

  init_main_graph = function() {
    var cy, edge_line_color;
    edge_line_color = '#F2B1BA';
    cy = cytoscape({
      container: $('#cy')[0],
      style: cytoscape.stylesheet().selector('node').css({
        'background-color': '#B3767E',
        content: 'data(id)'
      }).selector('edge').css({
        'line-color': edge_line_color,
        'target-arrow-color': '#000',
        'target-arrow-shape': 'triangle',
        width: 2,
        opacity: 0.8
      }),
      ready: function() {
        return console.log('ready');
      },
      layout: {
        name: 'spread',
        maxExpandIterations: 10
      }
    });
    cy.edgehandles();
    cy.on('select', function(ev) {
      var iid;
      cy.$().css({
        'line-color': edge_line_color
      });
      iid = ev.cyTarget.id();
      cy.$("edge[source=\"" + iid + "\"]").css({
        'line-color': '#000'
      });
      return cy.$("edge[target=\"" + iid + "\"]").css({
        'line-color': '#00F'
      });
    });
    cy.on('tap', function(ev) {
      var el;
      el = ev.cyTarget;
      if (el.length) {
        return;
      }
      return cy.add({
        group: 'nodes',
        data: {
          id: 'x'
        },
        position: ev.cyPosition
      });
    });
    cy.on('mouseover', function(ev) {
      var el;
      el = ev.cyTarget;
      if (!(el.length || (typeof el.isNode === "function" ? el.isNode() : void 0))) {
        return;
      }
      return el.css({
        'line-color': '#F00'
      });
    });
    cy.on('mouseout', function(ev) {
      var el;
      el = ev.cyTarget;
      if (!(el.length || (typeof el.isNode === "function" ? el.isNode() : void 0))) {
        return;
      }
      return el.css({
        'line-color': edge_line_color
      });
    });
    return cy;
  };

  init_edge_preview_graph = function() {
    var cy, edge_line_color;
    edge_line_color = '#F2B1BA';
    cy = cytoscape({
      container: $('#cy-edge-preview')[0],
      style: cytoscape.stylesheet().selector('node').css({
        'background-color': '#B3767E',
        content: 'data(id)'
      }).selector('edge').css({
        'line-color': edge_line_color,
        'target-arrow-color': '#000',
        'target-arrow-shape': 'triangle',
        width: 2,
        opacity: 0.8,
        content: 'data(label)'
      }),
      ready: function() {
        return console.log('ready');
      },
      layout: {
        name: 'spread',
        maxExpandIterations: 10
      }
    });
    return cy;
  };

}).call(this);

//# sourceMappingURL=graph.js.map
